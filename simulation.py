# -*- coding: utf-8 -*-
"""Content Filtering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ZYfgnYQ66eA6W_lk0iXqn1RyXIbbGHO

Uploading the Web-Scrapping (1).csv  file
"""

import pandas as pd
from google.colab import files
uploaded= files.upload()

import pandas as pd
body= pd.read_csv("Web-Scrapping (1).csv")
Summary=body["Summary"]
Url=body["Url"]

"""Displaying the dataset"""

import numpy as np
import random
sw=list(body.groupby("Category"))
MM=[]
for i in random.sample(list(range(0,len(sw))),10):
  X=np.random.randint(len(sw[i][1]),size=1)
  MM.append((sw[i][1].iloc[int(X)][0])-1)
body.iloc[MM]

"""Text Preprocessing and Vectorizing the dataset"""

import nltk
nltk.download('punkt')

from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from nltk.corpus import stopwords
import nltk 
nltk.download("stopwords")

import nltk
nltk.download('wordnet')

import re
def clean_lowercase(review_text):
    return str(review_text).lower()
body['CleanReview']=Summary.apply(clean_lowercase)

def clean_non_alphanumeric(review_text):
    return re.sub('[^a-zA-Z]',' ',review_text)   
body['CleanReview']=body['CleanReview'].apply(clean_non_alphanumeric)

from nltk.tokenize import word_tokenize   
def clean_tokenization(review_text):    
    return word_tokenize(review_text)      
body['CleanReview']=body['CleanReview'].apply(clean_tokenization)

from nltk.stem import PorterStemmer  
stemmer = PorterStemmer()   
def clean_stem(token):
    return [stemmer.stem(i) for i in token]   
body['CleanReview']=body['CleanReview'].apply(clean_stem)

from nltk.stem import WordNetLemmatizer   
lemma=WordNetLemmatizer()
def clean_lemmatization(token):
    return [lemma.lemmatize(word=w,pos='v') for w in token]    
body['CleanReview']=body['CleanReview'].apply(clean_lemmatization)

def Clean_length(token):
    return [i for i in token if len(i)>2]    
body['CleanReview']=body['CleanReview'].apply(Clean_length)

def convert_to_string(listReview):
    return ' '.join(listReview)
body['CleanReview']=body['CleanReview'].apply(convert_to_string)

my_stopwords= stopwords.words("english")
vectorizer = CountVectorizer(stop_words=my_stopwords)
bag_of_words = vectorizer.fit_transform(body['CleanReview'])
news_vector=bag_of_words.todense()

"""Mean reading time period of news"""

import bs4
import urllib, re




def extract_text(url):
    user_agent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7'

    headers={'User-Agent':user_agent,} 

    request=urllib.request.Request(url,None,headers) #The assembled request

    html = urllib.request.urlopen(request).read()
    soup = bs4.BeautifulSoup(html, 'html.parser')
    texts = soup.findAll(text=True)
    return texts

def is_visible(element):
    if element.parent.name in ['style', 'script', '[document]', 'head', 'title']:
        return False
    elif isinstance(element, bs4.element.Comment):
        return False
    elif element.string == "\n":
        return False
    return True
def filter_visible_text(page_texts):
    return filter(is_visible, page_texts)

WPM = 300
WORD_LENGTH = 5
def count_words_in_text(text_list, word_length):
    total_words = 0
    for current_text in text_list:
        total_words += len(current_text)/word_length
    return total_words
def estimate_reading_time(url):
    texts = extract_text(url)
    filtered_text = filter_visible_text(texts)
    # print(filtered_text)
    total_words = count_words_in_text(filtered_text, WORD_LENGTH)
    # print(total_words)
    return total_words/WPM

estimate_reading_time(Url[0])

import readtime
a=[]
for i in range(len(Url)):
  try:
    val = estimate_reading_time(Url[i])
    a.append(val)
    print(val)
  except Exception as e:
    print("Error", e)
    a.append(-1)
print(a)

bb=[5.69666666666667, 9.163999999999982, 3.4613333333333323, 2.9606666666666666, 3.7499999999999987, 4.580666666666665, 2.996666666666666, 2.5780000000000007, 3.213333333333333, 3.3986666666666667, 2.9119999999999995, 3.8093333333333326, 3.599999999999999, 5.101999999999997, 3.936666666666665, 3.1093333333333337, 3.3373333333333326, 4.198000000000003, 6.137333333333331, 3.24, 7.566000000000005, 7.153333333333338, 7.480000000000003, 7.920666666666661, 4.337333333333338, 5.076666666666678, 3.7420000000000027, 3.5220000000000034, 3.2266666666666644, 5.044666666666674, 3.782666666666671, 7.398666666666677, 5.743333333333347, 3.3333333333333335, 4.5986666666666745, 7.396000000000008, 4.01266666666667, 5.131333333333343, 3.645333333333335, 4.390000000000004, 3.283333333333332, 4.49133333333334, 8.182666666666654, 9.045999999999982, 4.833333333333339, 2.6020000000000008, 3.4093333333333335, 3.2406666666666655, 3.1726666666666663, 3.399333333333333, 6.676666666666669, 6.546000000000004, 4.960666666666669, 7.980666666666666, 3.9393333333333347, 6.34466666666667, 3.9166666666666674, 4.175333333333336, 5.795333333333337, 4.724000000000003, 5.1746666666666705, 4.366000000000003, 4.228000000000002, 5.2506666666666675, 5.4073333333333355, 5.238000000000002, 7.460666666666665, 4.219333333333336, 4.3080000000000025, 6.007333333333337, 3.597999999999999, 5.008000000000004, 5.133333333333334, 6.022000000000003, 5.198000000000004, 4.474000000000003, 3.8613333333333366, 3.6739999999999995, 3.4086666666666656, 6.300666666666669, 5.813333333333337, 6.585333333333336, 6.686666666666671, 6.560000000000001, 6.582666666666669, 5.588000000000001, 7.054666666666667, 6.011333333333334, 6.645333333333338, 4.718000000000003, 4.322666666666668, 3.6586666666666656, 3.758666666666668, 2.511999999999998, 2.6733333333333307, 3.112666666666665, 2.629333333333331, 5.004666666666668, 4.966000000000002, 5.9686666666666675, 6.840000000000002, 4.613333333333335, 3.3626666666666667, 2.5106666666666646, 6.8733333333333375, 4.486666666666668, 4.139333333333335, 2.471333333333331, 2.8906666666666663, 3.743333333333333, 3.555999999999999, 4.826000000000002, 4.412666666666669, 6.270000000000003, 4.575333333333334, 4.826000000000004, 2.4686666666666643, 4.837333333333336, 5.796000000000004, 7.054000000000001, 5.915333333333335, 4.652000000000002, 5.589333333333334, 2.2459999999999987, 2.470666666666665, 2.3099999999999983, 2.4373333333333314, 3.209999999999999, 2.905999999999999, 2.380000000000001, 5.532000000000005, 9.47866666666665, 4.266666666666669, 3.8966666666666683, 3.9920000000000004, 4.4086666666666705, 5.214666666666665, 3.6960000000000006, 2.279333333333333, 3.257333333333334, 2.747333333333334, 2.884666666666667, 2.3286666666666673, 3.257333333333334, 2.103999999999999, 2.636000000000001, 4.0200000000000005, 2.5953333333333344, 5.186000000000002, 3.102000000000001, 2.8726666666666674, 8.989333333333322, 3.8906666666666685, 8.602666666666655, 2.5193333333333343, 8.165999999999993, 8.530666666666654, 2.0933333333333324, 2.605333333333334, 2.762666666666665, 2.674666666666664, 3.146666666666664, 2.819999999999997, 2.7773333333333317, 2.7319999999999975, 5.377333333333334, 5.290000000000001, 3.7760000000000007, 4.871333333333334, 5.200000000000003, 5.612, 5.793333333333336, 5.023999999999998, 6.580000000000002, 7.124000000000006, 4.335333333333331, 4.2293333333333285, 4.06533333333333, 4.414666666666669, 4.581999999999996, 4.521333333333329, 4.3766666666666625, 4.358666666666663, 4.76333333333333, 4.625999999999997, 4.903333333333329, 4.415333333333329, 4.5239999999999965, 4.37733333333333, 4.434666666666663, 4.443999999999996, 6.901999999999998, 4.348666666666663, 4.201333333333329, 5.164000000000001, 4.985999999999998, 4.492000000000001, 3.535333333333332, 4.397333333333335, 5.410666666666666, 5.648666666666669, 7.958000000000002, 4.2440000000000015, 6.13466666666667, 6.381333333333336, 5.771333333333335, 6.344000000000001, 5.0680000000000005, 7.034666666666667, 5.0453333333333354, 5.388666666666668, 7.131333333333335, 4.2600000000000025, 4.241333333333335, 3.968666666666667, 4.459333333333334, 3.2479999999999993, 6.402000000000002, 4.8353333333333355, 5.504666666666669, 3.577999999999999, 4.190000000000001, 2.864666666666666, 5.464666666666665, 4.860666666666669, 4.126000000000001, 5.634666666666667, 4.659333333333335, 4.224000000000002, 4.270000000000001, 3.2586666666666653, 5.87066666666667, 4.739333333333335, 4.8146666666666675, 4.920666666666668, 5.018666666666669, 8.838000000000005, 6.254000000000003, 7.997333333333337, 6.168666666666671, 3.7926666666666673, 4.462000000000002, 5.652666666666669, 2.5813333333333315, 5.018666666666669, 5.972000000000004, 4.93066666666667, 4.290000000000002, 4.820000000000001, 5.796000000000003, 7.8013333333333, 4.47533333333333, 3.6913333333333322, 3.066666666666667, 2.694, 4.223999999999997, 3.968666666666665, 3.0873333333333335, 3.174, 2.6013333333333346, 3.8466666666666645, 3.45, 2.5066666666666673, 4.935999999999996, 2.8853333333333326, 3.0446666666666666, 8.74266666666666, 2.8859999999999997, 2.731333333333334, 4.141333333333331, 3.2606666666666664, 3.5306666666666766, 7.8899999999999695, 5.962666666666668, 3.122, 7.695999999999977, 8.623999999999993, 9.027333333333322, 7.011333333333325, 7.745333333333337, 7.270666666666668, 7.715999999999999, 8.29666666666666, 7.286000000000002, 8.01933333333333, 7.1926666666666685, 7.938666666666668, 9.46666666666664, 7.7506666666666675, 7.374000000000002, 7.195333333333335, 7.100000000000001, 8.375999999999985, 7.376666666666668, 7.217999999999999, 7.537333333333337, 6.315333333333332, 8.182666666666659, 6.738666666666665, 8.806666666666654, 7.544, 6.361333333333326, 8.745999999999988, 7.420000000000004, 9.026666666666642, 6.811999999999997, 7.153999999999996, 7.532666666666668, 7.154666666666662, 7.022666666666666, 8.121999999999995, 6.966666666666662, 10.54666666666665, 7.194666666666657, 6.735999999999998, 8.048666666666657, 7.878666666666667, 7.528666666666666, 7.151999999999994, 7.6466666666666665, 7.125333333333328, 11.951999999999979, 7.053333333333335, 7.703999999999994, 6.19133333333333, 8.883999999999984, 7.677333333333326, 6.525999999999994, 7.325333333333333, 7.505999999999996, 7.10466666666667, 9.8033333333333, 8.13799999999998, 7.820666666666664, 6.803333333333325, 7.305999999999997, 6.948666666666666, 8.234666666666667, 9.069999999999979, 7.404666666666668, 7.89133333333333, 7.446000000000001, 7.405999999999988, 6.749999999999997, 7.712666666666667, 6.752666666666664, 7.401333333333327, 11.223333333333299, 7.493333333333335, 7.182000000000001, 7.868000000000003, 9.22199999999999, 4.128666666666668, 3.938666666666667, 4.154666666666669, 4.316666666666668, 5.210666666666668, 3.809333333333333, 5.906666666666668, 3.541999999999999, 5.834000000000001, 4.0440000000000005, 4.244000000000001, 4.774000000000002, 4.234000000000003, 3.4979999999999993, 3.7006666666666668, 3.9500000000000006, 4.487333333333335, 4.985333333333338, 3.8486666666666687, 8.962666666666664, 6.006666666666669, 5.670000000000001, 4.176000000000001, 4.2586666666666675, 3.2233333333333323, 3.2306666666666666, 5.478000000000001, 5.387333333333336, 5.894000000000003, 3.2399999999999998, 2.8133333333333335, 6.059333333333336, 3.749333333333333, 5.412666666666668, 4.758000000000003, 3.970666666666667, 4.927333333333335, 5.3226666666666675, 3.9806666666666675, 4.159333333333334, 4.363333333333336, 3.813333333333334, 5.698000000000002, 5.008666666666668, 5.009333333333336, 5.133333333333335, 5.397333333333335, 7.024000000000003, 5.652666666666668, 5.864666666666668, 3.01, 6.676666666666669, 4.299333333333335, 2.6739999999999995, 5.78666666666667, 5.0306666666666695, 7.116666666666672, 2.5779999999999976, 2.502666666666664, 2.2339999999999995, 1.9739999999999998, 1.946000000000001, 4.924000000000001, 4.978000000000001, 7.162000000000003, 2.5979999999999976, 6.871333333333335, 9.50133333333334, 5.229333333333335, 12.91466666666667, 4.360666666666667, 7.300666666666666, 4.726666666666669, 3.9826666666666686, 4.653333333333335, 5.774, 1.9913333333333332, 3.8813333333333335, 3.122666666666665, 3.6333333333333333, 5.09, 3.606, 6.001333333333336, 3.370666666666666, 3.614666666666666, 5.644000000000002, 8.516000000000009, 4.750666666666668, 5.118666666666667, 4.549333333333336, 5.332666666666668, 4.708000000000002, 5.038666666666668, 3.601333333333332, 4.6560000000000015, 7.461999999999998, 9.84399999999999, 5.717333333333333, 4.659333333333335, 4.185333333333335, 4.572000000000002, 5.608666666666668, 5.080000000000002, 3.3219999999999987, 4.695333333333335, 4.390666666666667, 3.5739999999999994, 4.672666666666667, 5.504666666666669, 3.6340000000000003, 4.774000000000002, 3.690666666666665, 6.954000000000004, 4.549333333333336, 3.353999999999999, 5.0100000000000025, 5.720666666666668, 1.6319999999999992, 3.5546666666666655, 4.706666666666667, 2.7173333333333307, 5.09, 4.422666666666669, 5.808666666666668, 3.431999999999999, 8.04333333333333, 7.873333333333329, 11.455999999999982, 8.189999999999992, 4.719333333333336, 11.92466666666664, 4.552000000000001, 6.8946666666666685, 3.8240000000000016, 7.576666666666665, 7.222666666666671, 7.910666666666663, 3.329333333333343, 3.8120000000000087, 4.627333333333341, 3.8826666666666747, 3.9226666666666747, 3.5786666666666753, 3.130666666666677, 3.044666666666677, 3.4880000000000093, 3.5460000000000096, 3.7666666666666733, 3.197333333333343, 4.394666666666674, 3.481333333333343, 2.961333333333342, 3.3973333333333433, 4.136000000000007, 4.398666666666674, 4.388666666666674, 3.5660000000000096, 2.9560000000000093, 3.2506666666666764, 3.698000000000008, 3.8100000000000076, 3.2553333333333425, 3.944000000000007, 3.288666666666676, 3.8940000000000086, 3.7413333333333405, 3.1660000000000097, 4.338000000000006, 3.5413333333333434, 3.544666666666677, 4.094666666666674, 3.9253333333333416, 4.794000000000008, 3.6906666666666745, 3.211333333333343, 3.5773333333333435, 3.9693333333333407, 3.89000000000001, 3.642666666666673, 4.031333333333341, 3.406666666666678, 5.7280000000000095, 3.844666666666674, 3.8366666666666744, 3.245333333333343, 3.2360000000000095, 3.266666666666676, 3.6246666666666747, 3.8433333333333404, 2.587333333333338, 3.5266666666666766, 3.556666666666676, 3.340000000000009, 4.61933333333334, 4.0233333333333405, 3.896000000000009, 4.224000000000007, 4.13733333333334, 3.590000000000009, 3.3760000000000097, 3.5320000000000102, 3.7546666666666737, 3.4486666666666754, 5.0346666666666735, 3.570000000000009, 3.2306666666666755, 3.73533333333334, 3.565333333333343, 3.414666666666677, 3.429333333333343, 3.564666666666676, 3.136666666666676, 3.76933333333334, 3.2613333333333427, 3.4680000000000093, 4.437333333333342, 3.7140000000000075, 3.932666666666675, 3.487333333333342, 4.36533333333334, 3.4673333333333427, 3.9980000000000087, 3.4580000000000086, 4.055333333333341, 3.7186666666666746, 3.327333333333343, 3.5840000000000085, 2.951333333333343, 3.1386666666666763, 3.465333333333342, 3.8326666666666758, 3.7553333333333407, 2.9366666666666763, 5.706000000000007, 3.7046666666666748, 4.064000000000008, 3.3293333333333432, 4.728000000000007, 3.697333333333341, 3.7406666666666735, 3.470000000000009, 3.216666666666677, 3.4800000000000093, 5.412000000000008, 3.6686666666666747, 4.9960000000000075, 3.6446666666666747, 3.886666666666675, 3.3940000000000095, 4.106000000000007, 6.325333333333343, 3.4246666666666754, 3.6433333333333415, 4.208666666666673, 3.5193333333333436, 3.390666666666676, 3.17600000000001, 3.22800000000001, 3.3220000000000094, 3.972666666666674, 3.1193333333333424, 4.114666666666674, 3.2740000000000093, 3.53000000000001, 4.66333333333334, 3.173333333333342, 3.516666666666676, 3.5533333333333426, 3.4133333333333424, 3.75533333333334, 3.4686666666666746, 3.7806666666666735, 3.7906666666666737, 2.695333333333339, 3.1986666666666763, 3.584666666666675, 3.152666666666676, 3.6306666666666745, 3.1693333333333427, 3.4360000000000097, 2.981333333333343, 4.852666666666675, 3.2573333333333427, 3.2160000000000095, 4.858666666666675, 3.3286666666666767, 3.858666666666674, 2.985333333333342, 3.6526666666666747, 3.658666666666674, 4.529333333333339, 6.001333333333339, 3.254000000000009, 3.786666666666674, 3.271333333333342, 4.108000000000007, 3.361333333333343, 3.7653333333333396, 3.924666666666676, 3.9900000000000078, 3.3660000000000085, 3.065333333333342, 3.7986666666666755, 3.9386666666666756, 3.2513333333333425, 4.102666666666673, 3.6960000000000095, 4.038666666666673, 6.083333333333339, 3.316000000000009, 3.04800000000001, 3.163333333333343, 8.07133333333333, 7.525999999999992, 6.185333333333336, 8.961333333333254, 9.280666666666573, 6.449333333333335, 6.740000000000001, 3.0026666666666766, 10.73333333333324, 9.536666666666576, 5.470000000000009, 8.7506666666666, 7.33733333333333, 9.702666666666568, 10.512666666666574, 11.731333333333227, 9.397999999999913, 7.2926666666666655, 8.602666666666591, 10.623999999999896, 6.182666666666666, 7.1086666666666645, 9.353999999999974, 8.63666666666665, 9.563999999999972, 8.796000000000006, 16.873333333333356, 7.706000000000004, 6.368000000000004, 17.504666666666644, 4.96466666666667, 7.505333333333339, 7.250666666666676, 10.029999999999996, 8.983333333333325, 9.341999999999912, 6.103333333333336, 17.31666666666666, 16.234666666666676, 8.163333333333336, 17.018666666666626, 9.70399999999997, 6.1119999999999965, 6.069333333333329, 7.225999999999993, 6.935999999999996, 7.271333333333327, 6.988000000000005, 5.572666666666674, 11.433999999999893, 3.29400000000001, 3.6246666666666747, 4.066666666666674, 3.766666666666674, 3.5026666666666766, 3.6926666666666743, 10.735333333333287, 4.6353333333333415, 3.4660000000000095, 2.9280000000000093, 3.220000000000009, 3.1746666666666763, 3.9706666666666743, 3.99533333333334, 3.866000000000007, 4.36733333333334, 3.3780000000000094, 3.4866666666666757, 3.7500000000000067, 3.877333333333341, 3.5986666666666753, 4.319333333333341, 4.198666666666675, 7.297333333333351, 8.615999999999907, 9.379333333333173, 6.612000000000001, 6.504000000000001, 6.522666666666667, 6.5273333333333365, 6.5340000000000025, 6.782000000000002, 4.1480000000000015, 6.249333333333398, 5.998666666666745, 5.952000000000078, 6.413333333333406, 5.529333333333405, 7.447333333333299, 7.526000000000014, 6.754666666666743, 3.0493333333333315, 3.826666666666668, 15.187333333333308, 1.8666666666666656, 11.886666666666658, 6.011333333333336, 2.854000000000001, 8.017999999999994, 16.67733333333331, 4.284000000000002, 12.919999999999986, 14.350666666666656, 16.252666666666656, 11.51866666666665, 6.560000000000001, 5.683333333333336, 6.26066666666667, 3.3819999999999983, 14.984666666666662, 6.118000000000003, 6.686666666666671, 6.64666666666667, 3.601333333333333, 4.509333333333336, 4.312666666666668, 2.912666666666666, 2.9739999999999993, 3.5839999999999987, 4.762666666666669, 4.063333333333334, 2.3839999999999986, 4.666000000000002, 4.756666666666669, 3.896000000000003, 4.575333333333335, 5.44, 4.738, 2.419999999999998, 3.028666666666666, 3.5839999999999987, 6.812000000000003, 2.622, 5.239333333333335, 5.528000000000001, 4.154000000000002, 2.9319999999999995, 6.582666666666669, 5.151333333333337, 2.4106666666666654, 2.4286666666666656, 2.700666666666664, 2.817999999999998, 5.284666666666667, 2.491999999999998, 6.339333333333409, 7.7573333333333, 6.223333333333406, 5.7400000000000775, 6.816666666666755, 6.225333333333408, 6.381333333333409, 8.547999999999927, 6.8006666666667535, 2.529333333333334, 4.565333333333331, 2.6626666666666674, 4.935999999999996, 2.3726666666666665, 5.365333333333331, 3.262666666666667, 3.4146666666666663, 3.455333333333333, 2.337333333333334, 3.613333333333332, 3.838666666666666, 2.490000000000001, 5.281999999999999, 3.929333333333332, 3.7699999999999987, 3.6139999999999977, 4.878666666666666, 3.5859999999999976, 2.9713333333333334, 2.6673333333333393, 3.4386666666666756, 2.624000000000005, 3.456666666666676, 3.114000000000009, 3.4380000000000086, 3.0293333333333425, 3.5073333333333427, 5.021333333333342, 5.144000000000007, 3.4700000000000077, 4.178000000000007, 2.7033333333333402, 4.414666666666674, 3.370666666666677, 9.982666666666624, 4.53933333333334, 3.5773333333333435, 3.272666666666676, 4.150000000000007, 2.140666666666666, 3.0613333333333435, 3.7666666666666733, 3.916666666666674, 2.9533333333333434, 3.9086666666666745, 5.174666666666672, 6.9800000000000075, 2.2813333333333334, 5.160666666666675, 2.363333333333335, 3.0586666666666757, 2.852000000000008, 3.7980000000000063, 4.092666666666672, 3.1646666666666765, 5.504000000000004, 4.329333333333341, 3.416666666666676, 4.073333333333341, 2.5740000000000056, 2.734000000000006, 3.970000000000008, 3.249333333333343, 4.092000000000008, 2.9046666666666763, 4.48733333333334, 4.606666666666674, 4.0926666666666724, 2.0826666666666656, 2.383333333333335, 3.9580000000000077, 4.226666666666675, 3.4286666666666754, 2.6286666666666725, 4.976666666666674, 2.9620000000000086, 4.968666666666673, 3.2920000000000087, 2.795999999999998, 6.3753333333333355, 6.054666666666667, 6.023333333333335, 3.512666666666669, 8.474000000000004, 6.36666666666667, 7.905333333333333, 6.5166666666666675, 5.651333333333335, 5.614666666666671, 5.1753333333333345, 2.5399999999999974, 2.5779999999999976, 2.4346666666666645, 2.619333333333331, 2.531999999999998, 9.777999999999965, 9.209999999999987, 8.048666666666657, 2.393333333333337, 5.332666666666671, 2.6700000000000044, 3.9586666666666708, 2.6553333333333304, 3.949333333333335, 13.6233333333333, 2.2459999999999987, 5.540666666666672, 2.153999999999999, 5.202000000000008, 3.7660000000000067, 3.509333333333343, 3.3040000000000087, 4.2080000000000055, 3.598000000000008, 3.4706666666666752, 3.350666666666676, 3.283333333333342, 3.8366666666666736, 4.256000000000006, 3.8426666666666747, 5.902000000000009, 3.888666666666673, 4.0300000000000065, 5.184000000000007, 6.232000000000009, 2.9780000000000086, 2.8606666666666754, 2.387333333333336, 3.6953333333333407, 2.569333333333338, 5.334000000000004, 2.6966666666666725, 2.9940000000000095, 3.890000000000008, 4.424000000000007, 2.843333333333342, 3.4753333333333427, 3.3460000000000085, 4.200666666666675, 3.0706666666666758, 3.830000000000009, 2.114666666666666, 3.9760000000000058, 2.9860000000000095, 2.4920000000000035, 2.3853333333333357, 5.272666666666674, 3.4666666666666757, 8.111999999999965, 3.702666666666674, 3.852000000000008, 3.4706666666666752, 3.2786666666666764, 3.9200000000000075, 2.800666666666674, 4.600666666666673, 4.266000000000007, 2.4586666666666694, 3.0393333333333428, 3.92933333333334, 3.742000000000008, 5.090666666666674, 3.034666666666675, 3.173333333333343, 3.006666666666676, 3.6960000000000073, 3.344000000000009, 3.129333333333342, 2.931333333333343, 5.9306666666666725, 4.940666666666675, 2.9353333333333427, 5.526666666666676, 4.490000000000006, 3.647333333333342, 3.8460000000000076, 5.674000000000007, 3.8693333333333406, 3.285333333333343, 4.106000000000007, 5.902000000000009, 3.389333333333343, 5.154666666666672, 3.01800000000001, 4.0666666666666735, 3.630000000000007, 2.999333333333343, 4.548000000000007, 4.104666666666673, 2.25, 2.930666666666676, 2.658666666666672, 4.368666666666674, 2.591333333333338, 4.76133333333334, 2.3040000000000016, 7.450666666666663, 3.480666666666675, 3.290000000000009, 5.057333333333341, 3.6840000000000077, 3.4793333333333423, 9.119333333333289, 5.835333333333338, 3.0080000000000093, 3.8100000000000085, 3.4826666666666757, 7.11933333333334, 2.7933333333333406, 4.544666666666674, 3.3833333333333426, 2.7073333333333394, 3.2500000000000098, 3.0666666666666758, 3.262666666666676, 3.3113333333333426, 4.7380000000000075, 5.080666666666676, 4.545333333333342, 6.472666666666674, 3.6493333333333413, 5.070000000000007, 3.07600000000001, 2.0759999999999987, 3.204000000000009, 3.9353333333333413, 3.607333333333342, 3.0720000000000094, 3.3240000000000087, 2.538666666666671, 2.9353333333333427, 3.500666666666676, 8.619999999999964, 4.148666666666674, 3.160666666666676, 3.7240000000000086, 3.291333333333343, 3.7753333333333408, 3.28000000000001, 3.692000000000008, 2.6446666666666725, 5.490000000000007, 2.4773333333333367, 4.913333333333341, 3.6806666666666743, 3.8600000000000074, 4.642666666666673, 3.580666666666677]

from sklearn.metrics.pairwise import cosine_similarity
def recommender1(x):
  L=[]
  M=[]
  n=np.shape(x)[0]
  nn=np.shape(news_vector)[0]
  for i in range (0,n):
    for j in range(0,np.shape(news_vector)[0]):
      L.append(float(cosine_similarity(news_vector[j,:], news_vector[x[i][0]])*x[i][2]))
  for k in range(0,10):      
    a=L.index(max(L))
    M.append(int(a%nn))
    for s in range(0,n):
      L[(a%nn)+(s*nn)]=0
  return M

"""# Simulating and Generating the Dataset"""

import numpy as np    
import random
sw=list(body.groupby("Category"))
array = np.empty(shape=(100,20,3),dtype='object')
array1= np.empty(shape=(100,14,3),dtype='object')   
lis=[] 
for m in range(100):
  L=list(random.sample(list(range(0,len(sw))),10))
  for i in range(10):
    X=np.random.randint(len(sw[L[i]][1]),size=1)     
    array[m,i,0]=(sw[L[i]][1].iloc[X[0]][0])-1  
    array[m,i,2]=body.iloc[int(array[m,i,0])]["Time"]
    array[m,i,1]=body.iloc[int(array[m,i,0])]["Category"]   
  Y=random.sample(list(range(10)),random.randint(2,7))
  for j in range(len(Y)):
    array1[m,j,0:2]=array[m,Y[j],0:2]
    array1[m,j,2]=np.random.normal(loc=array[m,j,2],scale=abs(array[m,j,2]-2))
  Z=recommender1(array1[m,0:len(Y),:])
  for k in range(0,len(Z)):        
    array[m,k+10,0]=body.iloc[Z[k]][0]  
    array[m,k+10,2]=body.iloc[int(array[m,k+10,0])]["Time"]
    array[m,k+10,1]=body.iloc[int(array[m,k+10,0])]["Category"]   
  Z1=random.sample(list(range(10)),random.randint(2,7))
  for l in range(len(Z1)):
    array1[m,l+len(Y),0:2]=array[m,9+Z1[l],0:2]
    array1[m,l+len(Y),2]=np.random.normal(loc=array[m,9+Z1[l],2],scale=abs(array[m,9+Z1[l],2]-2))
  lis.append(array1[m][0:(len(Y)+len(Z1)-1)])

frame=pd.DataFrame([{"User ID":0,"Article ID":0,"Category":0,"Time Spent":0}])
for i in range(0,len(lis)):
  frame1=pd.DataFrame({"User ID":[i]*len(lis[i]),"Article ID":lis[i][:,0],"Category":lis[i][:,1],"Time Spent":lis[i][:,2]})
  frame=pd.concat((frame,frame1),ignore_index=True)
frame=frame.iloc[1:,:]

frame.to_csv("User_Data.csv")

Cat=[]
for i in range(0,len(sw)):
  Cat.append(sw[i][0])
dat=pd.DataFrame(0,index=np.arange(0,100),columns=Cat).astype(float)
for j in range(0,len(lis)):
  for k in range(0,len(Cat)):
    lo=list(np.where(lis[j][:,1]==Cat[k])[0])
    l1=list(np.where(array[j][:,1]==Cat[k])[0])
    if len(lo)==0:
      dat[Cat[k]][j]=0
    else:
      dat[Cat[k]][j]=abs((np.sum(lis[j][lo][:,2]))/(np.sum(array[j][l1][:,2])))

dat